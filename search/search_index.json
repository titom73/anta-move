{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#arista-network-test-automation-anta-framework","title":"Arista Network Test Automation (ANTA) Framework","text":"<p>ANTA is Python framework that automates tests for Arista devices.</p> <p> Because ANTA is moving to a new house in aristanetworks organization, website is also transitioning to a new address. Please update your bookmark to use anta.arista.com</p> <ul> <li>ANTA provides a set of tests to validate the state of your network</li> <li>ANTA can be used to:</li> <li>Automate NRFU (Network Ready For Use) test on a preproduction network</li> <li>Automate tests on a live network (periodically or on demand)</li> <li>ANTA can be used with:</li> <li>As a Python library in your own application</li> <li>The ANTA CLI</li> </ul> <p> Because ANTA is moving to a new house in aristanetworks organization, website is also transitioning to a new address. Please update your bookmark to use anta.arista.com</p>"},{"location":"contribution/","title":"Contributions","text":""},{"location":"contribution/#how-to-contribute-to-anta","title":"How to contribute to ANTA","text":"<p>Contribution model is based on a fork-model. Don\u2019t push to arista-netdevops-community/anta directly. Always do a branch in your forked repository and create a PR.</p> <p>To help development, open your PR as soon as possible even in draft mode. It helps other to know on what you are working on and avoid duplicate PRs.</p>"},{"location":"contribution/#create-a-development-environment","title":"Create a development environment","text":"<p>Run the following commands to create an ANTA development environment:</p> <pre><code># Clone repository\n$ git clone https://github.com/arista-netdevops-community/anta.git\n$ cd anta\n\n# Install ANTA in editable mode and its development tools\n$ pip install -e .[dev]\n# To also install the CLI\n$ pip install -e .[dev,cli]\n\n# Verify installation\n$ pip list -e\nPackage Version Editable project location\n------- ------- -------------------------\nanta    0.15.0   /mnt/lab/projects/anta\n</code></pre> <p>Then, <code>tox</code> is configured with few environments to run CI locally:</p> <pre><code>$ tox list -d\ndefault environments:\nclean  -&gt; Erase previous coverage reports\nlint   -&gt; Check the code style\ntype   -&gt; Check typing\npy38   -&gt; Run pytest with py38\npy39   -&gt; Run pytest with py39\npy310  -&gt; Run pytest with py310\npy311  -&gt; Run pytest with py311\nreport -&gt; Generate coverage report\n</code></pre>"},{"location":"contribution/#code-linting","title":"Code linting","text":"<pre><code>tox -e lint\n[...]\nlint: commands[0]&gt; black --check --diff --color .\nAll done! \u2728 \ud83c\udf70 \u2728\n104 files would be left unchanged.\nlint: commands[1]&gt; isort --check --diff --color .\nSkipped 7 files\nlint: commands[2]&gt; flake8 --max-line-length=165 --config=/dev/null anta\nlint: commands[3]&gt; flake8 --max-line-length=165 --config=/dev/null tests\nlint: commands[4]&gt; pylint anta\n\n--------------------------------------------------------------------\nYour code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)\n\n.pkg: _exit&gt; python /Users/guillaumemulocher/.pyenv/versions/3.8.13/envs/anta/lib/python3.8/site-packages/pyproject_api/_backend.py True setuptools.build_meta\n  lint: OK (19.26=setup[5.83]+cmd[1.50,0.76,1.19,1.20,8.77] seconds)\n  congratulations :) (19.56 seconds)\n</code></pre>"},{"location":"contribution/#code-typing","title":"Code Typing","text":"<pre><code>tox -e type\n\n[...]\ntype: commands[0]&gt; mypy --config-file=pyproject.toml anta\nSuccess: no issues found in 52 source files\n.pkg: _exit&gt; python /Users/guillaumemulocher/.pyenv/versions/3.8.13/envs/anta/lib/python3.8/site-packages/pyproject_api/_backend.py True setuptools.build_meta\n  type: OK (46.66=setup[24.20]+cmd[22.46] seconds)\n  congratulations :) (47.01 seconds)\n</code></pre> <p>NOTE: Typing is configured quite strictly, do not hesitate to reach out if you have any questions, struggles, nightmares.</p>"},{"location":"contribution/#unit-tests","title":"Unit tests","text":"<p>To keep high quality code, we require to provide a Pytest for every tests implemented in ANTA.</p> <p>All submodule should have its own pytest section under <code>tests/units/anta_tests/&lt;submodule-name&gt;.py</code>.</p>"},{"location":"contribution/#how-to-write-a-unit-test-for-an-antatest-subclass","title":"How to write a unit test for an AntaTest subclass","text":"<p>The Python modules in the <code>tests/units/anta_tests</code> folder  define test parameters for AntaTest subclasses unit tests. A generic test function is written for all unit tests in <code>tests.lib.anta</code> module.</p> <p>The <code>pytest_generate_tests</code> function definition in <code>conftest.py</code> is called during test collection.</p> <p>The <code>pytest_generate_tests</code> function will parametrize the generic test function based on the <code>DATA</code> data structure defined in <code>tests.units.anta_tests</code> modules.</p> <p>See https://docs.pytest.org/en/7.3.x/how-to/parametrize.html#basic-pytest-generate-tests-example</p> <p>The <code>DATA</code> structure is a list of dictionaries used to parametrize the test. The list elements have the following keys:</p> <ul> <li><code>name</code> (str): Test name as displayed by Pytest.</li> <li><code>test</code> (AntaTest): An AntaTest subclass imported in the test module - e.g. VerifyUptime.</li> <li><code>eos_data</code> (list[dict]): List of data mocking EOS returned data to be passed to the test.</li> <li><code>inputs</code> (dict): Dictionary to instantiate the <code>test</code> inputs as defined in the class from <code>test</code>.</li> <li><code>expected</code> (dict): Expected test result structure, a dictionary containing a key     <code>result</code> containing one of the allowed status (<code>Literal['success', 'failure', 'unset', 'skipped', 'error']</code>) and optionally a key <code>messages</code> which is a list(str) and each message is expected to  be a substring of one of the actual messages in the TestResult object.</li> </ul> <p>In order for your unit tests to be correctly collected, you need to import the generic test function even if not used in the Python module.</p> <p>Test example for <code>anta.tests.system.VerifyUptime</code> AntaTest.</p> <pre><code># Import the generic test function\nfrom tests.lib.anta import test  # noqa: F401\n\n# Import your AntaTest\nfrom anta.tests.system import VerifyUptime\n\n# Define test parameters\nDATA: list[dict[str, Any]] = [\n   {\n        # Arbitrary test name\n        \"name\": \"success\",\n        # Must be an AntaTest definition\n        \"test\": VerifyUptime,\n        # Data returned by EOS on which the AntaTest is tested\n        \"eos_data\": [{\"upTime\": 1186689.15, \"loadAvg\": [0.13, 0.12, 0.09], \"users\": 1, \"currentTime\": 1683186659.139859}],\n        # Dictionary to instantiate VerifyUptime.Input\n        \"inputs\": {\"minimum\": 666},\n        # Expected test result\n        \"expected\": {\"result\": \"success\"},\n    },\n    {\n        \"name\": \"failure\",\n        \"test\": VerifyUptime,\n        \"eos_data\": [{\"upTime\": 665.15, \"loadAvg\": [0.13, 0.12, 0.09], \"users\": 1, \"currentTime\": 1683186659.139859}],\n        \"inputs\": {\"minimum\": 666},\n        # If the test returns messages, it needs to be expected otherwise test will fail.\n        # NB: expected messages only needs to be included in messages returned by the test. Exact match is not required.\n        \"expected\": {\"result\": \"failure\", \"messages\": [\"Device uptime is 665.15 seconds\"]},\n    },\n]\n</code></pre>"},{"location":"contribution/#git-pre-commit-hook","title":"Git Pre-commit hook","text":"<pre><code>pip install pre-commit\npre-commit install\n</code></pre> <p>When running a commit or a pre-commit check:</p> <pre><code>\u276f echo \"import foobaz\" &gt; test.py &amp;&amp; git add test.py\n\u276f pre-commit\npylint...................................................................Failed\n- hook id: pylint\n- exit code: 22\n\n************* Module test\ntest.py:1:0: C0114: Missing module docstring (missing-module-docstring)\ntest.py:1:0: E0401: Unable to import 'foobaz' (import-error)\ntest.py:1:0: W0611: Unused import foobaz (unused-import)\n</code></pre> <p>NOTE: It could happen that pre-commit and tox disagree on something, in that case please open an issue on Github so we can take a look.. It is most probably wrong configuration on our side.</p>"},{"location":"contribution/#configure-mypypath","title":"Configure MYPYPATH","text":"<p>In some cases, mypy can complain about not having <code>MYPYPATH</code> configured in your shell. It is especially the case when you update both an anta test and its unit test. So you can configure this environment variable with:</p> <pre><code># Option 1: use local folder\nexport MYPYPATH=.\n\n# Option 2: use absolute path\nexport MYPYPATH=/path/to/your/local/anta/repository\n</code></pre>"},{"location":"contribution/#documentation","title":"Documentation","text":"<p><code>mkdocs</code> is used to generate the documentation. A PR should always update the documentation to avoid documentation debt.</p>"},{"location":"contribution/#install-documentation-requirements","title":"Install documentation requirements","text":"<p>Run pip to install the documentation requirements from the root of the repo:</p> <pre><code>pip install -e .[doc]\n</code></pre>"},{"location":"contribution/#testing-documentation","title":"Testing documentation","text":"<p>You can then check locally the documentation using the following command from the root of the repo:</p> <pre><code>mkdocs serve\n</code></pre> <p>By default, <code>mkdocs</code> listens to http://127.0.0.1:8000/, if you need to expose the documentation to another IP or port (for instance all IPs on port 8080), use the following command:</p> <pre><code>mkdocs serve --dev-addr=0.0.0.0:8080\n</code></pre>"},{"location":"contribution/#build-class-diagram","title":"Build class diagram","text":"<p>To build class diagram to use in API documentation, you can use <code>pyreverse</code> part of <code>pylint</code> with <code>graphviz</code> installed for jpeg generation.</p> <pre><code>pyreverse anta --colorized -a1 -s1 -o jpeg -m true -k --output-directory docs/imgs/uml/ -c &lt;FQDN anta class&gt;\n</code></pre> <p>Image will be generated under <code>docs/imgs/uml/</code> and can be inserted in your documentation.</p>"},{"location":"contribution/#checking-links","title":"Checking links","text":"<p>Writing documentation is crucial but managing links can be cumbersome. To be sure there is no dead links, you can use <code>muffet</code> with the following command:</p> <pre><code>muffet -c 2 --color=always http://127.0.0.1:8000 -e fonts.gstatic.com -b 8192\n</code></pre>"},{"location":"contribution/#continuous-integration","title":"Continuous Integration","text":"<p>GitHub actions is used to test git pushes and pull requests. The workflows are defined in this directory. We can view the results here.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#frequently-asked-questions-faq","title":"Frequently Asked Questions (FAQ)","text":""},{"location":"faq/#a-local-os-error-occurred-while-connecting-to-a-device","title":"A local OS error occurred while connecting to a device","text":"A local OS error occurred while connecting to a device <p>When running ANTA, you can receive <code>A local OS error occurred while connecting to &lt;device&gt;</code> errors. The underlying <code>OSError</code> exception can have various reasons: <code>[Errno 24] Too many open files</code> or <code>[Errno 16] Device or resource busy</code>.</p> <p>This usually means that the operating system refused to open a new file descriptor (or socket) for the ANTA process. This might be due to the hard limit for open file descriptors currently set for the ANTA process.</p> <p>At startup, ANTA sets the soft limit of its process to the hard limit up to 16384. This is because the soft limit is usually 1024 and the hard limit is usually higher (depends on the system). If the hard limit of the ANTA process is still lower than the number of selected tests in ANTA, the ANTA process may request to the operating system too many file descriptors and get an error, a WARNING is displayed at startup if this is the case.</p>"},{"location":"faq/#solution","title":"Solution","text":"<p>One solution could be to raise the hard limit for the user starting the ANTA process. You can get the current hard limit for a user using the command <code>ulimit -n -H</code> while logged in. Create the file <code>/etc/security/limits.d/10-anta.conf</code> with the following content: <pre><code>&lt;user&gt;  hard    nofile  &lt;value&gt;\n</code></pre> The <code>user</code> is the one with which the ANTA process is started. The <code>value</code> is the new hard limit. The maximum value depends on the system. A hard limit of 16384 should be sufficient for ANTA to run in most high scale scenarios. After creating this file, log out the current session and log in again.</p>"},{"location":"faq/#timeout-error-in-the-logs","title":"<code>Timeout</code> error in the logs","text":"<code>Timeout</code> error in the logs <p>When running ANTA, you can receive <code>&lt;Foo&gt;Timeout</code> errors in the logs (could be ReadTimeout, WriteTimeout, ConnectTimeout or PoolTimeout). More details on the timeouts of the underlying library are available here: https://www.python-httpx.org/advanced/timeouts.</p> <p>This might be due to the time the host on which ANTA is run takes to reach the target devices (for instance if going through firewalls, NATs, \u2026) or when a lot of tests are being run at the same time on a device (eAPI has a queue mechanism to avoid exhausting EOS resources because of a high number of simultaneous eAPI requests).</p>"},{"location":"faq/#solution_1","title":"Solution","text":"<p>Use the <code>timeout</code> option. As an example for the <code>nrfu</code> command:</p> <pre><code>anta nrfu --enable --username username --password arista --inventory inventory.yml -c nrfu.yml --timeout 50 text\n</code></pre> <p>The previous command set a couple of options for ANTA NRFU, one them being the <code>timeout</code> command, by default, when running ANTA from CLI, it is set to 30s. The timeout is increased to 50s to allow ANTA to wait for API calls a little longer.</p>"},{"location":"faq/#importerror-related-to-urllib3","title":"<code>ImportError</code> related to <code>urllib3</code>","text":"<code>ImportError</code> related to <code>urllib3</code> when running ANTA <p>When running the <code>anta --help</code> command, some users might encounter the following error:</p> <pre><code>ImportError: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with 'OpenSSL 1.0.2k-fips  26 Jan 2017'. See: https://github.com/urllib3/urllib3/issues/2168\n</code></pre> <p>This error arises due to a compatibility issue between <code>urllib3</code> v2.0 and older versions of OpenSSL.</p>"},{"location":"faq/#solution_2","title":"Solution","text":"<ol> <li> <p>Workaround: Downgrade <code>urllib3</code></p> <p>If you need a quick fix, you can temporarily downgrade the <code>urllib3</code> package:</p> <pre><code>pip3 uninstall urllib3\n\npip3 install urllib3==1.26.15\n</code></pre> </li> <li> <p>Recommended: Upgrade System or Libraries:</p> <pre><code>As per the [urllib3 v2 migration guide](https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html), the root cause of this error is an incompatibility with older OpenSSL versions. For example, users on RHEL7 might consider upgrading to RHEL8, which supports the required OpenSSL version.\n</code></pre> </li> </ol>"},{"location":"faq/#attributeerror-module-lib-has-no-attribute-openssl_add_all_algorithms","title":"<code>AttributeError: module 'lib' has no attribute 'OpenSSL_add_all_algorithms'</code>","text":"<code>AttributeError: module 'lib' has no attribute 'OpenSSL_add_all_algorithms'</code> when running ANTA <p>When running the <code>anta</code> commands after installation, some users might encounter the following error:</p> <pre><code>AttributeError: module 'lib' has no attribute 'OpenSSL_add_all_algorithms'\n</code></pre> <p>The error is a result of incompatibility between <code>cryptography</code> and <code>pyopenssl</code> when installing <code>asyncssh</code> which is a requirement of ANTA.</p>"},{"location":"faq/#solution_3","title":"Solution","text":"<ol> <li> <p>Upgrade <code>pyopenssl</code></p> <pre><code>pip install -U pyopenssl&gt;22.0\n</code></pre> </li> </ol>"},{"location":"faq/#__nscfconstantstring-initialize-error-on-osx","title":"<code>__NSCFConstantString initialize</code> error on OSX","text":"<code>__NSCFConstantString initialize</code> error on OSX <p>This error occurs because of added security to restrict multithreading in macOS High Sierra and later versions of macOS. https://www.wefearchange.org/2018/11/forkmacos.rst.html</p>"},{"location":"faq/#solution_4","title":"Solution","text":"<ol> <li> <p>Set the following environment variable</p> <pre><code>export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES\n</code></pre> </li> </ol>"},{"location":"faq/#still-facing-issues","title":"Still facing issues?","text":"<p>If you\u2019ve tried the above solutions and continue to experience problems, please follow the troubleshooting instructions and report the issue in our GitHub repository.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#getting-started","title":"Getting Started","text":"<p>This section shows how to use ANTA with basic configuration. All examples are based on Arista Test Drive (ATD) topology you can access by reaching out to your preferred SE.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>The easiest way to install ANTA package is to run Python (<code>&gt;=3.9</code>) and its pip package to install:</p> <pre><code>pip install anta[cli]\n</code></pre> <p>For more details about how to install package, please see the requirements and installation section.</p>"},{"location":"getting-started/#configure-arista-eos-devices","title":"Configure Arista EOS devices","text":"<p>For ANTA to be able to connect to your target devices, you need to configure your management interface</p> <pre><code>vrf instance MGMT\n!\ninterface Management0\n   description oob_management\n   vrf MGMT\n   ip address 192.168.0.10/24\n!\n</code></pre> <p>Then, configure access to eAPI:</p> <pre><code>!\nmanagement api http-commands\n   protocol https port 443\n   no shutdown\n   vrf MGMT\n      no shutdown\n   !\n!\n</code></pre>"},{"location":"getting-started/#create-your-inventory","title":"Create your inventory","text":"<p>ANTA uses an inventory to list the target devices for the tests. You can create a file manually with this format:</p> <pre><code>anta_inventory:\n  hosts:\n  - host: 192.168.0.10\n    name: spine01\n    tags: ['fabric', 'spine']\n  - host: 192.168.0.11\n    name: spine02\n    tags: ['fabric', 'spine']\n  - host: 192.168.0.12\n    name: leaf01\n    tags: ['fabric', 'leaf']\n  - host: 192.168.0.13\n    name: leaf02\n    tags: ['fabric', 'leaf']\n  - host: 192.168.0.14\n    name: leaf03\n    tags: ['fabric', 'leaf']\n  - host: 192.168.0.15\n    name: leaf04\n    tags: ['fabric', 'leaf']\n</code></pre> <p>You can read more details about how to build your inventory here</p>"},{"location":"getting-started/#test-catalog","title":"Test Catalog","text":"<p>To test your network, ANTA relies on a test catalog to list all the tests to run against your inventory. A test catalog references python functions into a yaml file.</p> <p>The structure to follow is like:</p> <pre><code>&lt;anta_tests_submodule&gt;:\n  - &lt;anta_tests_submodule function name&gt;:\n      &lt;test function option&gt;:\n        &lt;test function option value&gt;\n</code></pre> <p>You can read more details about how to build your catalog here</p> <p>Here is an example for basic tests:</p> <pre><code># Load anta.tests.software\nanta.tests.software:\n  - VerifyEOSVersion: # Verifies the device is running one of the allowed EOS version.\n      versions: # List of allowed EOS versions.\n        - 4.25.4M\n        - 4.26.1F\n        - '4.28.3M-28837868.4283M (engineering build)'\n  - VerifyTerminAttrVersion:\n      versions:\n        - v1.22.1\n\nanta.tests.system:\n  - VerifyUptime: # Verifies the device uptime is higher than a value.\n      minimum: 1\n  - VerifyNTP:\n  - VerifySyslog:\n\nanta.tests.mlag:\n  - VerifyMlagStatus:\n  - VerifyMlagInterfaces:\n  - VerifyMlagConfigSanity:\n\nanta.tests.configuration:\n  - VerifyZeroTouch: # Verifies ZeroTouch is disabled.\n  - VerifyRunningConfigDiffs:\n</code></pre>"},{"location":"getting-started/#test-your-network","title":"Test your network","text":""},{"location":"getting-started/#basic-usage-in-a-python-script","title":"Basic usage in a python script","text":""},{"location":"getting-started/#cli","title":"CLI","text":"<p>ANTA comes with a generic CLI entrypoint to run tests in your network. It requires an inventory file as well as a test catalog.</p> <p>This entrypoint has multiple options to manage test coverage and reporting.</p> <p>To run the NRFU, you need to select an output format amongst [\u201cjson\u201d, \u201ctable\u201d, \u201ctext\u201d, \u201ctpl-report\u201d]. For a first usage, <code>table</code> is recommended.  By default all test results for all devices are rendered but it can be changed to a report per test case or per host</p>"},{"location":"getting-started/#default-report-using-table","title":"Default report using table","text":"<pre><code>anta nrfu \\\n    --username tom \\\n    --password arista123 \\\n    --enable \\\n    --enable-password t \\\n    --inventory .personal/inventory_atd.yml \\\n    --catalog .personal/tests-bases.yml \\\n    table --tags leaf\n\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Settings \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Running ANTA tests:                                  \u2502\n\u2502 - ANTA Inventory contains 6 devices (AsyncEOSDevice) \u2502\n\u2502 - Tests catalog contains 10 tests                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n[10:17:24] INFO     Running ANTA tests...                                                                                                           runner.py:75\n  \u2022 Running NRFU Tests...100% \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 40/40 \u2022 0:00:02 \u2022 0:00:00\n\n                                                                       All tests results\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Device IP \u2503 Test Name                \u2503 Test Status \u2503 Message(s)       \u2503 Test description                                                     \u2503 Test category \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 leaf01    \u2502 VerifyEOSVersion         \u2502 success     \u2502                  \u2502 Verifies the device is running one of the allowed EOS version.       \u2502 software      \u2502\n\u2502 leaf01    \u2502 VerifyTerminAttrVersion  \u2502 success     \u2502                  \u2502 Verifies the device is running one of the allowed TerminAttr         \u2502 software      \u2502\n\u2502           \u2502                          \u2502             \u2502                  \u2502 version.                                                             \u2502               \u2502\n\u2502 leaf01    \u2502 VerifyUptime             \u2502 success     \u2502                  \u2502 Verifies the device uptime is higher than a value.                   \u2502 system        \u2502\n\u2502 leaf01    \u2502 VerifyNTP                \u2502 success     \u2502                  \u2502 Verifies NTP is synchronised.                                        \u2502 system        \u2502\n\u2502 leaf01    \u2502 VerifySyslog             \u2502 success     \u2502                  \u2502 Verifies the device had no syslog message with a severity of warning \u2502 system        \u2502\n\u2502           \u2502                          \u2502             \u2502                  \u2502 (or a more severe message) during the last 7 days.                   \u2502               \u2502\n\u2502 leaf01    \u2502 VerifyMlagStatus         \u2502 skipped     \u2502 MLAG is disabled \u2502 This test verifies the health status of the MLAG configuration.      \u2502 mlag          \u2502\n\u2502 leaf01    \u2502 VerifyMlagInterfaces     \u2502 skipped     \u2502 MLAG is disabled \u2502 This test verifies there are no inactive or active-partial MLAG      \u2502 mlag          \u2502\n[...]\n\u2502 leaf04    \u2502 VerifyMlagConfigSanity   \u2502 skipped     \u2502 MLAG is disabled \u2502 This test verifies there are no MLAG config-sanity inconsistencies.  \u2502 mlag          \u2502\n\u2502 leaf04    \u2502 VerifyZeroTouch          \u2502 success     \u2502                  \u2502 Verifies ZeroTouch is disabled.                                      \u2502 configuration \u2502\n\u2502 leaf04    \u2502 VerifyRunningConfigDiffs \u2502 success     \u2502                  \u2502                                                                      \u2502 configuration \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"getting-started/#report-in-text-mode","title":"Report in text mode","text":"<pre><code>$ anta nrfu \\\n    --username tom \\\n    --password arista123 \\\n    --enable \\\n    --enable-password t \\\n    --inventory .personal/inventory_atd.yml \\\n    --catalog .personal/tests-bases.yml \\\n    text --tags leaf\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Settings \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Running ANTA tests:                                  \u2502\n\u2502 - ANTA Inventory contains 6 devices (AsyncEOSDevice) \u2502\n\u2502 - Tests catalog contains 10 tests                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n[10:20:47] INFO     Running ANTA tests...                                                                                                           runner.py:75\n  \u2022 Running NRFU Tests...100% \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 40/40 \u2022 0:00:01 \u2022 0:00:00\nleaf01 :: VerifyEOSVersion :: SUCCESS\nleaf01 :: VerifyTerminAttrVersion :: SUCCESS\nleaf01 :: VerifyUptime :: SUCCESS\nleaf01 :: VerifyNTP :: SUCCESS\nleaf01 :: VerifySyslog :: SUCCESS\nleaf01 :: VerifyMlagStatus :: SKIPPED (MLAG is disabled)\nleaf01 :: VerifyMlagInterfaces :: SKIPPED (MLAG is disabled)\nleaf01 :: VerifyMlagConfigSanity :: SKIPPED (MLAG is disabled)\n[...]\n</code></pre>"},{"location":"getting-started/#report-in-json-format","title":"Report in JSON format","text":"<pre><code>$ anta nrfu \\\n    --username tom \\\n    --password arista123 \\\n    --enable \\\n    --enable-password t \\\n    --inventory .personal/inventory_atd.yml \\\n    --catalog .personal/tests-bases.yml \\\n    json --tags leaf\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Settings \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Running ANTA tests:                                  \u2502\n\u2502 - ANTA Inventory contains 6 devices (AsyncEOSDevice) \u2502\n\u2502 - Tests catalog contains 10 tests                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n[10:21:51] INFO     Running ANTA tests...                                                                                                           runner.py:75\n  \u2022 Running NRFU Tests...100% \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 40/40 \u2022 0:00:02 \u2022 0:00:00\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 JSON results of all tests                                                                                                                                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n[\n  {\n    \"name\": \"leaf01\",\n    \"test\": \"VerifyEOSVersion\",\n    \"categories\": [\n      \"software\"\n    ],\n    \"description\": \"Verifies the device is running one of the allowed EOS version.\",\n    \"result\": \"success\",\n    \"messages\": [],\n    \"custom_field\": \"None\",\n  },\n  {\n    \"name\": \"leaf01\",\n    \"test\": \"VerifyTerminAttrVersion\",\n    \"categories\": [\n      \"software\"\n    ],\n    \"description\": \"Verifies the device is running one of the allowed TerminAttr version.\",\n    \"result\": \"success\",\n    \"messages\": [],\n    \"custom_field\": \"None\",\n  },\n[...]\n]\n</code></pre> <p>You can find more information under the usage section of the website</p>"},{"location":"requirements-and-installation/","title":"Installation","text":""},{"location":"requirements-and-installation/#anta-requirements","title":"ANTA Requirements","text":""},{"location":"requirements-and-installation/#python-version","title":"Python version","text":"<p>Python 3 (<code>&gt;=3.9</code>) is required:</p> <pre><code>python --version\nPython 3.11.8\n</code></pre>"},{"location":"requirements-and-installation/#install-anta-package","title":"Install ANTA package","text":"<p>This installation will deploy tests collection, scripts and all their Python requirements.</p> <p>The ANTA package and the cli require some packages that are not part of the Python standard library. They are indicated in the pyproject.toml file, under dependencies.</p>"},{"location":"requirements-and-installation/#install-library-from-pypi-server","title":"Install library from Pypi server","text":"<pre><code>pip install anta\n</code></pre> <p>Warning</p> <ul> <li>This command alone will not install the ANTA CLI requirements.</li> <li>When using ANTA mode in AVD <code>eos_validate</code> role, (currently in preview), ensure you install the documented supported ANTA version for your AVD version.     The latest documented version can be found at: https://avd.arista.com/stable/roles/eos_validate_state/ANTA-Preview.html</li> </ul>"},{"location":"requirements-and-installation/#install-anta-cli-as-an-application-with-pipx","title":"Install ANTA CLI as an application with <code>pipx</code>","text":"<p><code>pipx</code> is a tool to install and run python applications in isolated environments. If you plan to use ANTA only as a CLI tool you can use <code>pipx</code> to install it. <code>pipx</code> installs ANTA in an isolated python environment and makes it available globally.</p> <pre><code>pipx install anta[cli]\n</code></pre> <p>Info</p> <p>Please take the time to read through the installation instructions of <code>pipx</code> before getting started.</p>"},{"location":"requirements-and-installation/#install-cli-from-pypi-server","title":"Install CLI from Pypi server","text":"<p>Alternatively, pip install with <code>cli</code> extra is enough to install the ANTA CLI.</p> <pre><code>pip install anta[cli]\n</code></pre>"},{"location":"requirements-and-installation/#install-anta-from-github","title":"Install ANTA from github","text":"<pre><code>pip install git+https://github.com/arista-netdevops-community/anta.git\npip install git+https://github.com/arista-netdevops-community/anta.git#egg=anta[cli]\n\n# You can even specify the branch, tag or commit:\npip install git+https://github.com/arista-netdevops-community/anta.git@&lt;cool-feature-branch&gt;\npip install git+https://github.com/arista-netdevops-community/anta.git@&lt;cool-feature-branch&gt;#egg=anta[cli]\n\npip install git+https://github.com/arista-netdevops-community/anta.git@&lt;cool-tag&gt;\npip install git+https://github.com/arista-netdevops-community/anta.git@&lt;cool-tag&gt;#egg=anta[cli]\n\npip install git+https://github.com/arista-netdevops-community/anta.git@&lt;more-or-less-cool-hash&gt;\npip install git+https://github.com/arista-netdevops-community/anta.git@&lt;more-or-less-cool-hash&gt;#egg=anta[cli]\n</code></pre>"},{"location":"requirements-and-installation/#check-installation","title":"Check installation","text":"<p>After installing ANTA, verify the installation with the following commands:</p> <pre><code># Check ANTA has been installed in your python path\npip list | grep anta\n\n# Check scripts are in your $PATH\n# Path may differ but it means CLI is in your path\nwhich anta\n/home/tom/.pyenv/shims/anta\n</code></pre> <p>Warning</p> <p>Before running the <code>anta --version</code> command, please be aware that some users have reported issues related to the <code>urllib3</code> package. If you encounter an error at this step, please refer to our FAQ page for guidance on resolving it.</p> <pre><code># Check ANTA version\nanta --version\nanta, version v0.15.0\n</code></pre>"},{"location":"requirements-and-installation/#eos-requirements","title":"EOS Requirements","text":"<p>To get ANTA working, the targeted Arista EOS devices must have eAPI enabled. They need to use the following configuration (assuming you connect to the device using Management interface in MGMT VRF):</p> <pre><code>configure\n!\nvrf instance MGMT\n!\ninterface Management1\n   description oob_management\n   vrf MGMT\n   ip address 10.73.1.105/24\n!\nend\n</code></pre> <p>Enable eAPI on the MGMT vrf:</p> <pre><code>configure\n!\nmanagement api http-commands\n   protocol https port 443\n   no shutdown\n   vrf MGMT\n      no shutdown\n!\nend\n</code></pre> <p>Now the switch accepts on port 443 in the MGMT VRF HTTPS requests containing a list of CLI commands.</p> <p>Run these EOS commands to verify:</p> <pre><code>show management http-server\nshow management api http-commands\n</code></pre>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#troubleshooting-anta","title":"Troubleshooting ANTA","text":"<p>A couple of things to check when hitting an issue with ANTA:</p> <pre><code>flowchart LR\n    A&gt;Hitting an issue with ANTA] --&gt; B{Is my issue &lt;br &gt;listed in the FAQ?}\n    B -- Yes --&gt; C{Does the FAQ solution&lt;&lt;br /&gt;works for me?}\n    C -- Yes --&gt; V(((Victory)))\n    B --&gt;|No| E{Is my problem&lt;br /&gt;mentioned in one&lt;&lt;br /&gt;of the open issues?}\n    C --&gt;|No| E\n    E -- Yes --&gt; F{Has the issue been&lt;br /&gt;fixed in a newer&lt;br /&gt;release or in main?}\n    F -- Yes --&gt; U[Upgrade]\n    E -- No ---&gt; H((Follow the steps below&lt;br /&gt;and open a Github issue))\n    U --&gt; I{Did it fix&lt;br /&gt; your problem}\n    I -- Yes --&gt; V\n    I -- No --&gt; H\n    F -- No ----&gt; G((Add a comment on the &lt;br /&gt;issue indicating you&lt;br &gt;are hitting this and&lt;br /&gt;describing your setup&lt;br /&gt; and adding your logs.))\n\n    click B \"../faq\" \"FAQ\"\n    click E \"https://github.com/arista-netdevops-community/anta/issues\"\n    click H \"https://github.com/arista-netdevops-community/anta/issues\"\n    style A stroke:#f00,stroke-width:2px</code></pre>"},{"location":"troubleshooting/#capturing-logs","title":"Capturing logs","text":"<p>To help document the issue in Github, it is important to capture some logs so the developers can understand what is affecting your system. No logs mean that the first question asked on the issue will probably be \u201cCan you share some logs please?\u201d.</p> <p>ANTA provides very verbose logs when using the <code>DEBUG</code> level.  When using DEBUG log level with a log file, the DEBUG logging level is not sent to stdout, but only to the file.</p> <p>Danger</p> <p>On real deployments, do not use DEBUG logging level without setting a log file at the same time.</p> <p>To save the logs to a file called <code>anta.log</code>, use the following flags:</p> <pre><code># Where ANTA_COMMAND is one of nrfu, debug, get, exec, check\nanta -l DEBUG \u2013log-file anta.log &lt;ANTA_COMMAND&gt;\n</code></pre> <p>See <code>anta --help</code> for more information.  These have to precede the <code>nrfu</code> cmd.</p> <p>Tip</p> <p>Remember that in ANTA, each level of command has its own options and they can only be set at this level. so the <code>-l</code> and <code>--log-file</code> MUST be between <code>anta</code> and the <code>ANTA_COMMAND</code>. similarly, all the <code>nrfu</code> options MUST be set between the <code>nrfu</code> and the <code>ANTA_NRFU_SUBCOMMAND</code> (<code>json</code>, <code>text</code>, <code>table</code> or <code>tpl-report</code>).</p> <p>As an example, for the <code>nrfu</code> command, it would look like:</p> <pre><code>anta -l DEBUG --log-file anta.log nrfu --enable --username username --password arista --inventory inventory.yml -c nrfu.yml text\n</code></pre>"},{"location":"troubleshooting/#anta_debug-environment-variable","title":"<code>ANTA_DEBUG</code> environment variable","text":"Warning <p>Do not use this if you do not know why. This produces a lot of logs and can create confusion if you do not know what to look for.</p> <p>The environment variable <code>ANTA_DEBUG=true</code> enable ANTA Debug Mode.</p> <p>This flag is used by various functions in ANTA: when set to true, the function will display or log more information. In particular, when an Exception occurs in the code and this variable is set, the logging function used by ANTA is different to also produce the Python traceback for debugging. This typically needs to be done when opening a GitHub issue and an Exception is seen at runtime.</p> <p>Example:</p> <pre><code>ANTA_DEBUG=true anta -l DEBUG --log-file anta.log nrfu --enable --username username --password arista --inventory inventory.yml -c nrfu.yml text\n</code></pre>"},{"location":"troubleshooting/#troubleshooting-on-eos","title":"Troubleshooting on EOS","text":"<p>ANTA is using a specific ID in eAPI requests towards EOS. This allows for easier eAPI requests debugging on the device using EOS configuration <code>trace CapiApp setting UwsgiRequestContext/4,CapiUwsgiServer/4</code> to set up CapiApp agent logs.</p> <p>Then, you can view agent logs using: <pre><code>bash tail -f /var/log/agents/CapiApp-*\n\n2024-05-15 15:32:54.056166  1429 UwsgiRequestContext  4 request content b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": \"latest\", \"cmds\": [{\"cmd\": \"show ip route vrf default 10.255.0.3\", \"revision\": 4}], \"format\": \"json\", \"autoComplete\": false, \"expandAliases\": false}, \"id\": \"ANTA-VerifyRoutingTableEntry-132366530677328\"}'\n</code></pre></p>"},{"location":"usage-inventory-catalog/","title":"Inventory & Tests catalog","text":""},{"location":"usage-inventory-catalog/#inventory-and-catalog","title":"Inventory and Catalog","text":"<p>The ANTA framework needs 2 important inputs from the user to run: a device inventory and a test catalog.</p> <p>Both inputs can be defined in a file or programmatically.</p>"},{"location":"usage-inventory-catalog/#device-inventory","title":"Device Inventory","text":"<p>A device inventory is an instance of the AntaInventory class.</p>"},{"location":"usage-inventory-catalog/#device-inventory-file","title":"Device Inventory File","text":"<p>The ANTA device inventory can easily be defined as a YAML file. The file must comply with the following structure:</p> <pre><code>anta_inventory:\n  hosts:\n    - host: &lt; ip address value &gt;\n      port: &lt; TCP port for eAPI. Default is 443 (Optional)&gt;\n      name: &lt; name to display in report. Default is host:port (Optional) &gt;\n      tags: &lt; list of tags to use to filter inventory during tests &gt;\n      disable_cache: &lt; Disable cache per hosts. Default is False. &gt;\n  networks:\n    - network: &lt; network using CIDR notation &gt;\n      tags: &lt; list of tags to use to filter inventory during tests &gt;\n      disable_cache: &lt; Disable cache per network. Default is False. &gt;\n  ranges:\n    - start: &lt; first ip address value of the range &gt;\n      end: &lt; last ip address value of the range &gt;\n      tags: &lt; list of tags to use to filter inventory during tests &gt;\n      disable_cache: &lt; Disable cache per range. Default is False. &gt;\n</code></pre> <p>The inventory file must start with the <code>anta_inventory</code> key then define one or multiple methods:</p> <ul> <li><code>hosts</code>: define each device individually</li> <li><code>networks</code>: scan a network for devices accessible via eAPI</li> <li><code>ranges</code>: scan a range for devices accessible via eAPI</li> </ul> <p>A full description of the inventory model is available in API documentation</p> <p>Info</p> <p>Caching can be disabled per device, network or range by setting the <code>disable_cache</code> key to <code>True</code> in the inventory file. For more details about how caching is implemented in ANTA, please refer to Caching in ANTA.</p>"},{"location":"usage-inventory-catalog/#example","title":"Example","text":"<pre><code>---\nanta_inventory:\n  hosts:\n  - host: 192.168.0.10\n    name: spine01\n    tags: ['fabric', 'spine']\n  - host: 192.168.0.11\n    name: spine02\n    tags: ['fabric', 'spine']\n  networks:\n  - network: '192.168.110.0/24'\n    tags: ['fabric', 'leaf']\n  ranges:\n  - start: 10.0.0.9\n    end: 10.0.0.11\n    tags: ['fabric', 'l2leaf']\n</code></pre>"},{"location":"usage-inventory-catalog/#test-catalog","title":"Test Catalog","text":"<p>A test catalog is an instance of the AntaCatalog class.</p>"},{"location":"usage-inventory-catalog/#test-catalog-file","title":"Test Catalog File","text":"<p>In addition to the inventory file, you also have to define a catalog of tests to execute against your devices. This catalog list all your tests, their inputs and their tags.</p> <p>A valid test catalog file must have the following structure: <pre><code>---\n&lt;Python module&gt;:\n    - &lt;AntaTest subclass&gt;:\n        &lt;AntaTest.Input compliant dictionary&gt;\n</code></pre></p>"},{"location":"usage-inventory-catalog/#example_1","title":"Example","text":"<pre><code>---\nanta.tests.connectivity:\n  - VerifyReachability:\n      hosts:\n        - source: Management0\n          destination: 1.1.1.1\n          vrf: MGMT\n        - source: Management0\n          destination: 8.8.8.8\n          vrf: MGMT\n      filters:\n        tags: ['leaf']\n      result_overwrite:\n        categories:\n          - \"Overwritten category 1\"\n        description: \"Test with overwritten description\"\n        custom_field: \"Test run by John Doe\"\n</code></pre> <p>It is also possible to nest Python module definition: <pre><code>anta.tests:\n  connectivity:\n    - VerifyReachability:\n        hosts:\n          - source: Management0\n            destination: 1.1.1.1\n            vrf: MGMT\n          - source: Management0\n            destination: 8.8.8.8\n            vrf: MGMT\n        filters:\n          tags: ['leaf']\n        result_overwrite:\n          categories:\n            - \"Overwritten category 1\"\n          description: \"Test with overwritten description\"\n          custom_field: \"Test run by John Doe\"\n</code></pre></p> <p>This test catalog example is maintained with all the tests defined in the <code>anta.tests</code> Python module.</p>"},{"location":"usage-inventory-catalog/#test-tags","title":"Test tags","text":"<p>All tests can be defined with a list of user defined tags. These tags will be mapped with device tags: when at least one tag is defined for a test, this test will only be executed on devices with the same tag. If a test is defined in the catalog without any tags, the test will be executed on all devices.</p> <pre><code>anta.tests.system:\n  - VerifyUptime:\n      minimum: 10\n      filters:\n        tags: ['demo', 'leaf']\n  - VerifyReloadCause:\n  - VerifyCoredump:\n  - VerifyAgentLogs:\n  - VerifyCPUUtilization:\n      filters:\n        tags: ['leaf']\n</code></pre> <p>Info</p> <p>When using the CLI, you can filter the NRFU execution using tags. Refer to this section of the CLI documentation.</p>"},{"location":"usage-inventory-catalog/#tests-available-in-anta","title":"Tests available in ANTA","text":"<p>All tests available as part of the ANTA framework are defined under the <code>anta.tests</code> Python module and are categorised per family (Python submodule). The complete list of the tests and their respective inputs is available at the tests section of this website.</p> <p>To run test to verify the EOS software version, you can do:</p> <pre><code>anta.tests.software:\n  - VerifyEOSVersion:\n</code></pre> <p>It will load the test <code>VerifyEOSVersion</code> located in <code>anta.tests.software</code>. But since this test has mandatory inputs, we need to provide them as a dictionary in the YAML file:</p> <pre><code>anta.tests.software:\n  - VerifyEOSVersion:\n      # List of allowed EOS versions.\n      versions:\n        - 4.25.4M\n        - 4.26.1F\n</code></pre> <p>The following example is a very minimal test catalog:</p> <pre><code>---\n# Load anta.tests.software\nanta.tests.software:\n  # Verifies the device is running one of the allowed EOS version.\n  - VerifyEOSVersion:\n      # List of allowed EOS versions.\n      versions:\n        - 4.25.4M\n        - 4.26.1F\n\n# Load anta.tests.system\nanta.tests.system:\n  # Verifies the device uptime is higher than a value.\n  - VerifyUptime:\n      minimum: 1\n\n# Load anta.tests.configuration\nanta.tests.configuration:\n  # Verifies ZeroTouch is disabled.\n  - VerifyZeroTouch:\n  - VerifyRunningConfigDiffs:\n</code></pre>"},{"location":"usage-inventory-catalog/#catalog-with-custom-tests","title":"Catalog with custom tests","text":"<p>In case you want to leverage your own tests collection, use your own Python package in the test catalog. So for instance, if my custom tests are defined in the <code>titom73.tests.system</code> Python module, the test catalog will be:</p> <pre><code>titom73.tests.system:\n  - VerifyPlatform:\n    type: ['cEOS-LAB']\n</code></pre> <p>How to create custom tests</p> <p>To create your custom tests, you should refer to this documentation</p>"},{"location":"usage-inventory-catalog/#customize-test-description-and-categories","title":"Customize test description and categories","text":"<p>It might be interesting to use your own categories and customized test description to build a better report for your environment. ANTA comes with a handy feature to define your own <code>categories</code> and <code>description</code> in the report.</p> <p>In your test catalog, use <code>result_overwrite</code> dictionary with <code>categories</code> and <code>description</code> to just overwrite this values in your report:</p> <pre><code>anta.tests.configuration:\n  - VerifyZeroTouch: # Verifies ZeroTouch is disabled.\n      result_overwrite:\n        categories: ['demo', 'pr296']\n        description: A custom test\n  - VerifyRunningConfigDiffs:\nanta.tests.interfaces:\n  - VerifyInterfaceUtilization:\n</code></pre> <p>Once you run <code>anta nrfu table</code>, you will see following output:</p> <pre><code>\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Device IP \u2503 Test Name                  \u2503 Test Status \u2503 Message(s) \u2503 Test description                              \u2503 Test category \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 spine01   \u2502 VerifyZeroTouch            \u2502 success     \u2502            \u2502 A custom test                                 \u2502 demo, pr296   \u2502\n\u2502 spine01   \u2502 VerifyRunningConfigDiffs   \u2502 success     \u2502            \u2502                                               \u2502 configuration \u2502\n\u2502 spine01   \u2502 VerifyInterfaceUtilization \u2502 success     \u2502            \u2502 Verifies interfaces utilization is below 75%. \u2502 interfaces    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usage-inventory-catalog/#example-script-to-merge-catalogs","title":"Example script to merge catalogs","text":"<p>The following script reads all the files in <code>intended/test_catalogs/</code> with names <code>&lt;device_name&gt;-catalog.yml</code> and merge them together inside one big catalog <code>anta-catalog.yml</code>.</p> <pre><code>#!/usr/bin/env python\nfrom anta.catalog import AntaCatalog\n\nfrom pathlib import Path\nfrom anta.models import AntaTest\n\n\nCATALOG_SUFFIX = '-catalog.yml'\nCATALOG_DIR = 'intended/test_catalogs/'\n\nif __name__ == \"__main__\":\n    catalog = AntaCatalog()\n    for file in Path(CATALOG_DIR).glob('*'+CATALOG_SUFFIX):\n        c = AntaCatalog.parse(file)\n        device = str(file).removesuffix(CATALOG_SUFFIX).removeprefix(CATALOG_DIR)\n        print(f\"Merging test catalog for device {device}\")\n        # Apply filters to all tests for this device\n        for test in c.tests:\n            test.inputs.filters = AntaTest.Input.Filters(tags=[device])\n        catalog = catalog.merge(c)\n    with open(Path('anta-catalog.yml'), \"w\") as f:\n        f.write(catalog.dump().yaml())\n</code></pre>"}]}